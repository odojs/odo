// Generated by CoffeeScript 1.7.1
var i, noes, yeses, _i, _j, _len, _len1,
  __slice = [].slice;

yeses = ['yep', 'yah', 'yarr', 'yaar', 'aye', 'ay', 'sure', 'ok'];

noes = ['nah', 'nope', ''];

for (_i = 0, _len = yeses.length; _i < _len; _i++) {
  i = yeses[_i];
  this[i] = true;
}

for (_j = 0, _len1 = noes.length; _j < _len1; _j++) {
  i = noes[_j];
  this[i] = false;
}

define(['domain', 'odo/plugins', 'odo/config', 'odo/async'], function(domain, Plugins, config, async) {
  return function(contexts) {
    var d;
    d = domain.create();
    d.on('error', function(err) {
      if (err.stack != null) {
        console.error(err.stack);
      } else {
        console.error(err);
      }
      return process.exit(1);
    });
    return d.run(function() {
      config.contexts = contexts;
      return requirejs(config.systems, function() {
        var context, plugins, _k, _len2;
        plugins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        plugins = new Plugins(plugins);
        if (typeof contexts === 'string') {
          contexts = [contexts];
        }
        for (_k = 0, _len2 = contexts.length; _k < _len2; _k++) {
          context = contexts[_k];
          plugins.run(context);
        }
        return requirejs(['odo/hub'], function(hub) {
          var event, item, payload, tasks, _fn, _l, _len3, _len4, _m, _ref;
          tasks = [];
          for (_l = 0, _len3 = contexts.length; _l < _len3; _l++) {
            context = contexts[_l];
            if (config[context] == null) {
              continue;
            }
            _ref = config[context];
            for (_m = 0, _len4 = _ref.length; _m < _len4; _m++) {
              item = _ref[_m];
              _fn = function(event, payload) {
                return tasks.push(function(tcb) {
                  return hub.ready(function(rcb) {
                    rcb();
                    return hub.emit(event, payload, function() {
                      return tcb();
                    });
                  });
                });
              };
              for (event in item) {
                payload = item[event];
                _fn(event, payload);
              }
            }
          }
          if (tasks.length > 0) {
            return async.series(tasks, function() {
              return console.log('Finished playback of events');
            });
          }
        });
      });
    });
  };
});
