// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var AccessTokens, AuthorisationCodes, Clients;
    AccessTokens = (function() {
      function AccessTokens() {
        this.save = __bind(this.save, this);
        this.find = __bind(this.find, this);
        this.tokens = {};
      }

      AccessTokens.prototype.find = function(key, done) {
        var token;
        token = this.tokens[key];
        return done(null, token);
      };

      AccessTokens.prototype.save = function(token, userID, clientID, done) {
        this.tokens[token] = {
          userID: userID,
          clientID: clientID
        };
        return done(null);
      };

      return AccessTokens;

    })();
    AuthorisationCodes = (function() {
      function AuthorisationCodes() {
        this["delete"] = __bind(this["delete"], this);
        this.save = __bind(this.save, this);
        this.find = __bind(this.find, this);
        this.codes = {};
      }

      AuthorisationCodes.prototype.find = function(key, done) {
        var code;
        code = this.codes[key];
        return done(null, code);
      };

      AuthorisationCodes.prototype.save = function(code, clientID, redirectURI, userID, done) {
        this.codes[code] = {
          clientID: clientID,
          redirectURI: redirectURI,
          userID: userID
        };
        return done(null);
      };

      AuthorisationCodes.prototype["delete"] = function(key, done) {
        delete this.codes[key];
        return done(null);
      };

      return AuthorisationCodes;

    })();
    Clients = (function() {
      function Clients() {
        this.findByClientId = __bind(this.findByClientId, this);
        this.find = __bind(this.find, this);
        this.clients = [
          {
            id: '1',
            name: 'Samplr',
            clientId: 'abc123',
            clientSecret: 'ssh-secret'
          }
        ];
      }

      Clients.prototype.find = function(id, done) {
        var client, i, len;
        i = 0;
        len = this.clients.length;
        while (i < len) {
          client = this.clients[i];
          if (client.id === id) {
            return done(null, client);
          }
          i++;
        }
        return done(null, null);
      };

      Clients.prototype.findByClientId = function(clientId, done) {
        var client, i, len;
        i = 0;
        len = this.clients.length;
        while (i < len) {
          client = this.clients[i];
          if (client.clientId === clientId) {
            return done(null, client);
          }
          i++;
        }
        return done(null, null);
      };

      return Clients;

    })();
    return {
      clients: new Clients(),
      accessTokens: new AccessTokens(),
      authorizationCodes: new AuthorisationCodes()
    };
  });

}).call(this);
