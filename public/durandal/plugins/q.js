// Generated by CoffeeScript 1.7.1
define(['durandal/system', 'q'], function(system, Q) {
  var originalDefine, originalSetModuleId;
  system.defer = function(action) {
    var dfd, promise;
    dfd = Q.defer();
    action.call(dfd, dfd);
    promise = dfd.promise;
    dfd.promise = function() {
      return promise;
    };
    return dfd;
  };
  window.requireQ = function(deps) {
    var dfd;
    dfd = Q.defer();
    requirejs(deps, function() {
      return dfd.resolve(arguments);
    });
    return dfd.promise;
  };
  originalDefine = window.define;
  window.define = function(name, deps, callback) {
    var args, d, method;
    method = function(cb) {
      return function() {
        var arg, args, dfd, foundPromise, that, _i, _len;
        args = Array.prototype.slice.call(arguments, 0);
        foundPromise = false;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          foundPromise = foundPromise || arg && (arg.then != null);
        }
        if (typeof cb !== 'function') {
          return cb;
        }
        if (!foundPromise) {
          return cb.apply(this, args);
        }
        dfd = Q.defer();
        that = this;
        Q.all(args).then(function(resolved) {
          return dfd.resolve(cb.apply(that, resolved));
        });
        return dfd.promise;
      };
    };
    if (typeof name !== 'string') {
      if (system.isArray(name)) {
        args = [name, method(deps)];
      } else {
        args = [method(name)];
      }
    } else if (!system.isArray(deps)) {
      d = ['require', 'exports', 'module'];
      if (deps.length === 1) {
        d = ['require'];
      }
      args = [name, d, method(deps)];
    } else {
      args = [name, deps, method(callback)];
    }
    return originalDefine.apply(this, args);
  };
  window.define.amd = {
    jQuery: true
  };
  system.acquire = function() {
    var arrayRequest, deps, dfd, first;
    deps = void 0;
    first = arguments[0];
    arrayRequest = false;
    if (system.isArray(first)) {
      deps = first;
      arrayRequest = true;
    } else {
      deps = Array.prototype.slice.call(arguments, 0);
    }
    dfd = Q.defer();
    requirejs(deps, function() {
      return Q.spread(arguments, function() {
        var args;
        args = arguments;
        return setTimeout((function() {
          if (args.length > 1 || arrayRequest) {
            return dfd.resolve(Array.prototype.slice.call(args, 0));
          } else {
            return dfd.resolve(args[0]);
          }
        }), 1);
      });
    });
    return dfd.promise;
  };
  originalSetModuleId = system.setModuleId;
  return system.setModuleId = function(obj, id) {
    if (system.isPromise(obj)) {
      obj.then(function(newObj) {
        return originalSetModuleId(newObj, id);
      });
      return;
    }
    return originalSetModuleId(obj, id);
  };
});
