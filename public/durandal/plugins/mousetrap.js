// Generated by CoffeeScript 1.6.3
(function() {
  define(['knockout', 'jquery', 'mousetrap'], function(ko, $, Mousetrap) {
    Mousetrap = (function(Mousetrap) {
      var _originalBind;
      _originalBind = Mousetrap.bind;
      Mousetrap.bind = function(keys, originalCallback, action) {
        var callback, handle, isBound;
        isBound = true;
        handle = {
          unbind: function() {
            return isBound = false;
          },
          bind: function() {
            return isBound = true;
          }
        };
        callback = function() {
          if (!isBound) {
            return;
          }
          return originalCallback.apply(this, arguments);
        };
        _originalBind(keys, callback, action);
        return handle;
      };
      return Mousetrap;
    })(Mousetrap);
    Mousetrap.stopCallback = function(e, element, combo) {
      var $element;
      $element = $(element);
      if ($element.hasClass('mousetrap-yes')) {
        return false;
      }
      if ($element.hasClass('mousetrap-yes-' + combo)) {
        return false;
      }
      return element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA' || (element.contentEditable && element.contentEditable === 'true');
    };
    return ko.bindingHandlers.shortcuts = {
      init: function(element, valueAccessor) {
        var handler, handles, key, shortcuts, wrap;
        wrap = function(handler, key) {
          return function() {
            handler(key);
            return false;
          };
        };
        shortcuts = ko.unwrap(valueAccessor());
        handles = [];
        for (key in shortcuts) {
          handler = shortcuts[key];
          handles.push(Mousetrap.bind(key, wrap(handler, key)));
        }
        return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
          var handle, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = handles.length; _i < _len; _i++) {
            handle = handles[_i];
            _results.push(handle.unbind());
          }
          return _results;
        });
      }
    };
  });

}).call(this);
