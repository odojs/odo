{"name":"Odo","tagline":"Nodejs and durandaljs framework.","body":"# Odo - whatever you want it to be\r\nA Nodejs framework for creating awesome things.\r\n\r\n[Status and current work on Trello](https://trello.com/board/odo/4f7b3e995aa70d786202e667)\r\n\r\n## Goals\r\n1. Easy to install, use, modify, adapt and refactor\r\n2. Modular and lightweight components that are useful independently\r\n3. Strong cohesion where things change at the same rate, loose coupling where things change at a different rate\r\n4. Few concepts needed in any one area of the code to keep mental effort of development low\r\n\r\nOdo hopefully follows these goals and also makes it easy to write applications that follow these goals.\r\n\r\n## Techniques\r\n- [Domain-driven design](http://martinfowler.com/tags/domain%20driven%20design.html)\r\n- [Event sourcing](http://martinfowler.com/eaaDev/EventSourcing.html)\r\n- [Command and Query Responsibility Segregation](http://martinfowler.com/bliki/CQRS.html)\r\n- [Event-driven architecture](http://msdn.microsoft.com/en-nz/architecture/aa699424.aspx)\r\n- [UI composition](http://www.udidahan.com/2012/06/23/ui-composition-techniques-for-correct-service-boundaries/)\r\n- [Single-page applications](http://www.johnpapa.net/spa/)\r\n- [Schema-less database](http://martinfowler.com/nosql.html)\r\n- [Dependency injection](http://martinfowler.com/articles/injection.html)\r\n\r\n---\r\n\r\n# Get started\r\nFork [odo example](https://github.com/tcoats/odo-example)\r\n\r\n# Overview\r\nThere are two types of code in Odo: infrastructure and plugins.\r\n\r\n## Infrastructure\r\nTools, frameworks and techniques make up the odo infrastructure. Using existing 3rd party frameworks and libraries has been prioritised over custom development. Where existing frameworks are not available small independent utilities have been written.\r\n\r\nThe goal of any infrastructure code is to accomplish one task, do it well and have few touch points with any other code.\r\n\r\nInfrastructure is included as and when you need it by code you write. Components like the hub 'odo/hub' and humanize 'odo/humanize' are examples of infrastructure.\r\n\r\n## Plugins\r\nPlugins are independent features of the application loosely coupled to other plugins to make up the whole application. Usually plugins communicate through a combination of dependency injection and events.\r\n\r\nPlugins are added to the systems property in config.cson. Express web authentication modules 'odo/auth', 'odo/auth/local', 'odo/auth/facebook' and public folder 'odo/public' are examples of plugins.\r\n\r\n## Execution context\r\nPlugins can run in four contexts: web, api, domain and projection. This technique allows the web code, database logic, and validation rules for a particular piece of information to exist in the same codebase but run in four different contexts. Having all aspects in the same codebase increases speed of development and still provides good decoupling between concepts.\r\n\r\nPlugins are loaded on startup and either expose themselves as a class or as a plain object. Specific methods are checked for and will be called depending on the context the plugin is running in. These methods are 'web', 'api', 'domain' and 'projection'.\r\n\r\n```coffee\r\nclass ExamplePlugin\r\n    web: =>\r\n        console.log \"I'm running in web context\"\r\n        # I can register express routes here\r\n```\r\n\r\nFrontend plugins are registered by backend code in the 'web' context. They have the ability to bind themselves to several hooks, most importantly as single page application routes through durandal.\r\n\r\n---\r\n\r\n# Backend infrastructure\r\n## [Requirejs](http://requirejs.org/)\r\nAll of odo uses requirejs to pull together plugins and components. In the backend node.js's require function is passed into require to include npm modules.\r\n\r\n```coffee\r\nrequirejs = require 'requirejs'\r\nrequirejs.config\r\n    nodeRequire: require\r\n    paths:\r\n        odo: './node_modules/odo'\r\n        local: './'\r\nrequirejs ['odo/bootstrap']\r\n```\r\n\r\nIn the frontend requirejs is used more conventionally - included by the html file and configured by a javascript file.\r\n\r\n## [Mandrill](http://mandrill.com/)\r\nFor sending emails.\r\n\r\n```coffee\r\ndefine ['odo/mandrill'], (Mandrill) ->\r\n    options =\r\n        message:\r\n            text: 'An email sent with Mandrill'\r\n            subject: 'Email from Odo'\r\n            from_email: 'odo@odojs.com'\r\n            from_name: 'Odo'\r\n            to: [\r\n                email: 'john.smith@example.com'\r\n                name: 'John Smith'\r\n                type: 'to'\r\n            ]\r\n\r\n    new Mandrill()\r\n        .send(options)\r\n        .then(-> console.log 'Email away!')\r\n        .catch((err) -> console.log err)\r\n```\r\n\r\n## Configuration\r\nRequire 'odo/config' into your code to access all configuration.\r\n\r\nThe code reads a local cson file 'config.cson'. Use this file to add plugins to your project, add global configuration that won't change per environment and add events and commands you want published and sent at the start of the application.\r\n\r\nAdditionally an environment variable named 'ODO_CONFIG' is parsed as a cson file. Use this for database details and other values that change between development and production environments.\r\n\r\nUsing the domain configuration set in config.cson a further environment variable is also loaded as a cson file. For example if odo: domain: 'odo-example' is present in the config.cson file then 'ODO_EXAMPLE_ODO_CONFIG' is also parsed. Use this for configuration specific to a project.\r\n\r\nDirect environment variables are also checked, see config.coffee for a template. For example both 'EXPRESS_PORT' and 'ODO_EXAMPLE_EXPRESS_PORT' will be checked to get the port express should run on, along with any values set in 'ODO_CONFIG' and 'ODO_EXAMPLE_ODO_CONFIG'.\r\n\r\n## Eventstore\r\nEventstore provides tooling to help implement Event Sourcing. The infrustructire includes an extend method to add methods and properties to an aggregate object to support event sourcing and the CQRS pattern. It uses the eventstore library and is backed by redis.\r\n\r\nSee user.coffee for a web, domain and projection eventstore example.\r\n\r\n## Hub\r\nThe hub used for cross plugin communication. It's following the CQRS pattern separating commands from events. The hub is using redis publish and subscribe. Event listers can be bound through the receive method and command handlers can be bound through the handle method. Send and publish methods are used to send commands and publish events.\r\n\r\n```coffee\r\ndefine ['odo/hub'], (hub) ->\r\n    hub.receive 'userHasDisplayName', (event, cb) ->\r\n        console.log \"A new display name! #{event.payload.displayName}\"\r\n        cb()\r\n\r\n    hub.send\r\n        command: 'assignDisplayNameToUser'\r\n        payload:\r\n            id: 34\r\n            displayName: 'John Smith'\r\n            \r\n    hub.publish\r\n        event: 'subspotActivityHasIncreased'\r\n        payload:\r\n            amount: '100%'\r\n```\r\n\r\n## Plugin\r\nPlugin is a component to help load other plugins. Provides web, api, domain and projection methods that call the same named method on an array of plugins passed to it's constructor.\r\n\r\n```coffee\r\ndefine [\r\n    'odo/plugins'\r\n    'local/identity/user'\r\n    'local/identity/organisation'\r\n    'local/identity/invitation'\r\n    'local/identity/permissions'\r\n    'local/identity/public'\r\n], (Plugins, plugins...) ->\r\n    new Plugins plugins\r\n```\r\n\r\n## Misc helpers\r\nRecorder and sequencer are used internally, you're welcome to use them too.\r\n\r\n---\r\n\r\n# Backend plugins\r\n## [Express](http://expressjs.com/)\r\nThe web context is based around express. Plugins exposed in the web context are given an opportunity to register against different parts of express to define routes and extend the express system.\r\n\r\n```coffee\r\ndefine ['odo/express'], (express) ->\r\n    web: ->\r\n        express.get '/test', (req, res) ->\r\n            res.send 'Hello World'\r\n\r\n```\r\n\r\n'odo/express' needs to be included in the systems array after any plugins wanting web context.\r\n\r\n## [Restify](http://mcavage.me/node-restify/)\r\nThe api context is based around restify. Plugins exposed in the api context are given the opportunity to register against different parts of restify to define routes and extend the restify system.\r\n\r\n```coffee\r\ndefine ['odo/restify'], (restify) ->\r\n    web: ->\r\n        restify.get '/test', (req, res) ->\r\n            res.send 'Hello World'\r\n\r\n```\r\n\r\n'odo/restify' needs to be included in the systems array after any plugins wanting api context.\r\n\r\n## Bower\r\nA web plugin to host the /bower_components directory so anything you've installed with bower is available to the web.\r\n\r\nE.g. `bower install --save jquery` will result in `http://localhost:1234/jquery/dist/jquery.min.js` being available, depending on your express port.\r\n\r\n## Durandal\r\nAn express plugin to register durandal components you want called in the Front End.\r\n\r\n```coffee\r\ndefine [\r\n    'module'\r\n    'odo/express'\r\n    'odo/durandal'\r\n], (module, express, durandal) ->\r\n    web: ->\r\n        express.route '/views', express.modulepath(module.uri) + '/public'\r\n        durandal.register 'views/welcome'\r\n```\r\n\r\nAnd in a public folder is welcome.coffee and welcome.html:\r\n\r\n```coffee\r\ndefine ['knockout', 'plugins/router'], (ko, router) ->\r\n    router.map\r\n        route: ''\r\n        moduleId: 'views/welcome'\r\n    \r\n    class Welcome\r\n        title: 'Welcome'\r\n        \r\n        constructor: ->\r\n            @displayName = ko.observable 'John Smith'\r\n```\r\n\r\n```html\r\n<div class=\"test\">\r\n    <h1>Test Page</h1>\r\n    <p>Welcome <span data-bind=\"text: displayName\"></span><p>\r\n</div>\r\n```\r\n\r\n## Handlebars\r\nA plugin for web context to register handlebars as the view engine for express and add additional functionality.\r\n\r\n```coffee\r\ndefine ['odo/express'], (module, express) ->\r\n    web: =>\r\n        express.get '/test', (req, res) ->\r\n            res.render\r\n                view: 'templates/layout'\r\n                data:\r\n                    title: req.user.displayName\r\n                    displayName: 'John Smith'\r\n                partials:\r\n                    content: 'test'\r\n```\r\n\r\nThis will combine the layout template with the test template from a directory called 'templates'.\r\n\r\nlayout.html:\r\n\r\n```handlebars\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n        <title>{{title}}</title>\r\n    </head>\r\n\r\n    <body>\r\n        {{hook 'content'}}\r\n    </body>\r\n</html>\r\n```\r\n\r\ntest.html:\r\n\r\n```html\r\n<div class=\"test\">\r\n    <h1>Test Page</h1>\r\n    <p>Welcome {{displayName}}<p>\r\n</div>\r\n```\r\n\r\n## Public\r\nHosts the odo public directory which includes durandal components and identity and authentication code. Also hosts a public directory available in your application for static assets and durandal models and views.\r\n\r\n## Passport authentication - local, google, facebook, twitter and metocean\r\nA set of plugins that provide urls and methods to authenticate a user with passport and passport plugins. Custom local, twitter, facebook, google and metocean passport plugins have been provided.\r\n\r\n---\r\n\r\n# Technologies\r\n## Developed alongside Odo\r\n- [Tapinto](https://github.com/tcoats/tapinto) (tap into classes and methods)\r\n- [Injectinto](https://github.com/tcoats/injectinto) (dependency injection)\r\n- [Peekinto](https://github.com/tcoats/peekinto) (ui composition for express)\r\n- [Fetching](https://github.com/tcoats/fetching) (fetching strategies)\r\n\r\n## Backend and front end\r\n- [Requirejs](http://requirejs.org/) (dependency injection)\r\n- [Q](https://github.com/kriskowal/q) (promises)\r\n- [node-uuid](https://github.com/broofa/node-uuid) (guids)\r\n- [humanize](https://github.com/hubspot/humanize) (string formatting)\r\n\r\n## Back end\r\n- [Express](http://expressjs.com/) (http server)\r\n- [Restify](http://mcavage.me/node-restify/) (rest api)\r\n- [Redis](http://redis.io/) (storage)\r\n- [Passport](http://passportjs.org/) (authentication)\r\n- [js-md5](https://github.com/emn178/js-md5) (md5 hash)\r\n- [eventstore](https://github.com/jamuhl/nodeEventStore) (event sourcing)\r\n\r\n## Front end\r\n- [Durandaljs](http://durandaljs.com/) (single page app)\r\n- [Knockoutjs](http://knockoutjs.com/) (mvvm in browser)\r\n- [Knockoutjs Validation](https://github.com/Knockout-Contrib/Knockout-Validation) (validation)\r\n- [jQuery](http://jquery.com/) (dom manipulation)\r\n- [Bootstrap](http://getbootstrap.com/) (scaffolding)\r\n- [Animate.css](https://daneden.me/animate/) (css animations)\r\n- [Mousetrap](http://craig.is/killing/mice) (keyboard shortcuts)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}