// Generated by CoffeeScript 1.6.3
(function() {
  define(['durandal/system', 'q'], function(system, Q) {
    var originalDefine, originalSetModuleId;
    system.defer = function(action) {
      var deferred, promise;
      deferred = Q.defer();
      action.call(deferred, deferred);
      promise = deferred.promise;
      deferred.promise = function() {
        return promise;
      };
      return deferred;
    };
    window.requireQ = function(deps) {
      var dfd;
      dfd = Q.defer();
      requirejs(deps, function() {
        return dfd.resolve(arguments);
      });
      return dfd.promise;
    };
    originalDefine = window.define;
    window.defineQ = function(name, deps, callback) {
      var args, method;
      method = function(cb) {
        return function() {
          var args, dfd, that;
          that = this;
          dfd = Q.defer();
          args = Array.prototype.slice.call(arguments, 0);
          Q.all(args).then(function(resolved) {
            return dfd.resolve(cb.apply(that, resolved));
          });
          return dfd.promise;
        };
      };
      if (typeof name !== 'string') {
        if (system.isArray(name)) {
          args = [name, method(deps)];
        } else {
          args = [method(name)];
        }
      } else if (!system.isArray(deps)) {
        args = [name, method(deps)];
      } else {
        args = [name, deps, method(callback)];
      }
      return originalDefine.apply(this, args);
    };
    system.acquire = function() {
      var arrayRequest, deps, first;
      deps = void 0;
      first = arguments[0];
      arrayRequest = false;
      if (system.isArray(first)) {
        deps = first;
        arrayRequest = true;
      } else {
        deps = Array.prototype.slice.call(arguments, 0);
      }
      return this.defer(function(dfd) {
        return requireQ(deps).spread(function() {
          var args;
          args = arguments;
          return setTimeout((function() {
            if (args.length > 1 || arrayRequest) {
              return dfd.resolve(Array.prototype.slice.call(args, 0));
            } else {
              return dfd.resolve(args[0]);
            }
          }), 1);
        }).fail(function(err) {
          return dfd.reject(err);
        });
      }).promise();
    };
    originalSetModuleId = system.setModuleId;
    return system.setModuleId = function(obj, id) {
      if (system.isPromise(obj)) {
        obj.then(function(newObj) {
          return originalSetModuleId(newObj, id);
        });
        return;
      }
      return originalSetModuleId(obj, id);
    };
  });

}).call(this);
