// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['odo/config', 'odo/hub', 'odo/eventstore', 'redis', 'js-md5'], function(config, hub, es, redis, md5) {
  var User, UserApi;
  User = (function() {
    function User(id) {
      this.removeLocalSigninForUser = __bind(this.removeLocalSigninForUser, this);
      this.createPasswordResetToken = __bind(this.createPasswordResetToken, this);
      this.assignPasswordToUser = __bind(this.assignPasswordToUser, this);
      this.createLocalSigninForUser = __bind(this.createLocalSigninForUser, this);
      this.disconnectMetOceanFromUser = __bind(this.disconnectMetOceanFromUser, this);
      this.connectMetOceanToUser = __bind(this.connectMetOceanToUser, this);
      this.disconnectOAuth2FromUser = __bind(this.disconnectOAuth2FromUser, this);
      this.connectOAuth2ToUser = __bind(this.connectOAuth2ToUser, this);
      this.disconnectGoogleFromUser = __bind(this.disconnectGoogleFromUser, this);
      this.connectGoogleToUser = __bind(this.connectGoogleToUser, this);
      this.disconnectFacebookFromUser = __bind(this.disconnectFacebookFromUser, this);
      this.connectFacebookToUser = __bind(this.connectFacebookToUser, this);
      this.disconnectTwitterFromUser = __bind(this.disconnectTwitterFromUser, this);
      this.connectTwitterToUser = __bind(this.connectTwitterToUser, this);
      this.assignUsernameToUser = __bind(this.assignUsernameToUser, this);
      this.assignDisplayNameToUser = __bind(this.assignDisplayNameToUser, this);
      this.createVerifyEmailAddressToken = __bind(this.createVerifyEmailAddressToken, this);
      this.assignEmailAddressToUser = __bind(this.assignEmailAddressToUser, this);
      this.startTrackingUser = __bind(this.startTrackingUser, this);
      this.id = id;
    }

    User.prototype.startTrackingUser = function(command, callback) {
      this["new"]('userTrackingStarted', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.assignEmailAddressToUser = function(command, callback) {
      this["new"]('userHasEmailAddress', {
        id: this.id,
        email: command.email,
        oldemail: command.oldemail
      });
      return callback(null);
    };

    User.prototype.createVerifyEmailAddressToken = function(command, callback) {
      this["new"]('userHasVerifyEmailAddressToken', {
        id: this.id,
        email: command.email,
        token: command.token
      });
      return callback(null);
    };

    User.prototype.assignDisplayNameToUser = function(command, callback) {
      this["new"]('userHasDisplayName', {
        id: this.id,
        displayName: command.displayName
      });
      return callback(null);
    };

    User.prototype.assignUsernameToUser = function(command, callback) {
      this["new"]('userHasUsername', {
        id: this.id,
        username: command.username
      });
      return callback(null);
    };

    User.prototype.connectTwitterToUser = function(command, callback) {
      this["new"]('userTwitterConnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.disconnectTwitterFromUser = function(command, callback) {
      this["new"]('userTwitterDisconnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.connectFacebookToUser = function(command, callback) {
      this["new"]('userFacebookConnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.disconnectFacebookFromUser = function(command, callback) {
      this["new"]('userFacebookDisconnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.connectGoogleToUser = function(command, callback) {
      this["new"]('userGoogleConnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.disconnectGoogleFromUser = function(command, callback) {
      this["new"]('userGoogleDisconnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.connectOAuth2ToUser = function(command, callback) {
      this["new"]('userOAuth2Connected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.disconnectOAuth2FromUser = function(command, callback) {
      this["new"]('userOAuth2Disconnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.connectMetOceanToUser = function(command, callback) {
      this["new"]('userMetOceanConnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.disconnectMetOceanFromUser = function(command, callback) {
      this["new"]('userMetOceanDisconnected', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.createLocalSigninForUser = function(command, callback) {
      this["new"]('userHasLocalSignin', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    User.prototype.assignPasswordToUser = function(command, callback) {
      this["new"]('userHasPassword', {
        id: this.id,
        password: command.password
      });
      return callback(null);
    };

    User.prototype.createPasswordResetToken = function(command, callback) {
      this["new"]('userHasPasswordResetToken', {
        id: this.id,
        token: command.token
      });
      return callback(null);
    };

    User.prototype.removeLocalSigninForUser = function(command, callback) {
      this["new"]('userLocalSigninRemoved', {
        id: this.id,
        profile: command.profile
      });
      return callback(null);
    };

    return User;

  })();
  return UserApi = (function() {
    function UserApi() {
      this.get = __bind(this.get, this);
      this.addOrRemoveValues = __bind(this.addOrRemoveValues, this);
      this.projection = __bind(this.projection, this);
      this.domain = __bind(this.domain, this);
      this.defaultHandler = __bind(this.defaultHandler, this);
      this.db = __bind(this.db, this);
    }

    UserApi.prototype.db = function() {
      if (this._db != null) {
        return this._db;
      }
      return this._db = redis.createClient(config.redis.port, config.redis.host);
    };

    UserApi.prototype.commands = ['startTrackingUser', 'assignEmailAddressToUser', 'createVerifyEmailAddressToken', 'assignDisplayNameToUser', 'assignUsernameToUser', 'connectTwitterToUser', 'disconnectTwitterFromUser', 'connectFacebookToUser', 'disconnectFacebookFromUser', 'connectGoogleToUser', 'disconnectGoogleFromUser', 'connectOAuth2ToUser', 'disconnectOAuth2FromUser', 'connectMetOceanToUser', 'disconnectMetOceanFromUser', 'createLocalSigninForUser', 'assignPasswordToUser', 'createPasswordResetToken', 'removeLocalSigninForUser'];

    UserApi.prototype.defaultHandler = function(command) {
      var user;
      user = new User(command.payload.id);
      es.extend(user);
      return user.applyHistoryThenCommand(command);
    };

    UserApi.prototype.domain = function() {
      var command, _i, _len, _ref, _results;
      _ref = this.commands;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        _results.push(hub.handle(command, this.defaultHandler));
      }
      return _results;
    };

    UserApi.prototype.projection = function() {
      hub.receive('userTrackingStarted', (function(_this) {
        return function(event, cb) {
          var user;
          user = {
            id: event.payload.id,
            displayName: event.payload.profile.displayName
          };
          return _this.db().hset("" + config.odo.domain + ":users", event.payload.id, JSON.stringify(user), cb);
        };
      })(this));
      hub.receive('userHasEmailAddress', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.email = event.payload.email;
            user.emailHash = md5(event.payload.email.trim().toLowerCase());
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userHasDisplayName', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.displayName = event.payload.displayName;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userHasUsername', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            console.log("giving user a username " + event.payload.username);
            user.username = event.payload.username;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userTwitterConnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.twitter = {
              id: event.payload.profile.id,
              profile: event.payload.profile
            };
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userTwitterDisconnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.twitter = null;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userFacebookConnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.facebook = {
              id: event.payload.profile.id,
              profile: event.payload.profile
            };
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userFacebookDisconnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.facebook = null;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userGoogleConnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.google = {
              id: event.payload.profile.id,
              profile: event.payload.profile
            };
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userGoogleDisconnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.google = null;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userMetOceanConnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.metocean = {
              id: event.payload.profile.id,
              profile: event.payload.profile
            };
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userMetOceanDisconnected', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.metocean = null;
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userHasLocalSignin', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.local = {
              id: event.payload.id,
              profile: event.payload.profile
            };
            return user;
          }, cb);
        };
      })(this));
      hub.receive('userHasPassword', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.local.profile.password = event.payload.password;
            return user;
          }, cb);
        };
      })(this));
      return hub.receive('userLocalSigninRemoved', (function(_this) {
        return function(event, cb) {
          return _this.addOrRemoveValues(event, function(user) {
            user.local = null;
            return user;
          }, cb);
        };
      })(this));
    };

    UserApi.prototype.addOrRemoveValues = function(event, callback, cb) {
      return this.db().hget("" + config.odo.domain + ":users", event.payload.id, (function(_this) {
        return function(err, user) {
          if (err != null) {
            cb();
            return;
          }
          user = JSON.parse(user);
          user = callback(user);
          user = JSON.stringify(user, null, 4);
          return _this.db().hset("" + config.odo.domain + ":users", event.payload.id, user, function() {
            return cb();
          });
        };
      })(this));
    };

    UserApi.prototype.get = function(id, callback) {
      return this.db().hget("" + config.odo.domain + ":users", id, (function(_this) {
        return function(err, data) {
          if (err != null) {
            callback(err);
            return;
          }
          data = JSON.parse(data);
          if (data != null) {
            callback(null, data);
            return;
          }
          return setTimeout(function() {
            return _this.db().hget("" + config.odo.domain + ":users", id, function(err, data) {
              if (err != null) {
                callback(err);
                return;
              }
              data = JSON.parse(data);
              return callback(null, data);
            });
          }, 1000);
        };
      })(this));
    };

    return UserApi;

  })();
});
