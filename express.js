// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['odo/config', 'odo/recorder'], function(config, Recorder) {
    var Express;
    Express = (function(_super) {
      __extends(Express, _super);

      Express.prototype.configMethods = ['route', 'use'];

      Express.prototype.appMethods = ['get', 'post', 'put', 'delete', 'engine', 'set'];

      function Express() {
        this.web = __bind(this.web, this);
        var method, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this.configMethods;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          method = _ref[_i];
          this[method] = this._record(method);
        }
        _ref1 = this.appMethods;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          method = _ref1[_j];
          this[method] = this._record(method);
        }
        Express.__super__.constructor.call(this);
      }

      Express.prototype.modulepath = function(uri) {
        var items;
        items = uri.split('/');
        items.pop();
        return items.join('/');
      };

      Express.prototype.web = function() {
        var bodyParser, express, http, key, port, value, _ref;
        http = require('http');
        express = require('express');
        this.app = express();
        _ref = config.express;
        for (key in _ref) {
          value = _ref[key];
          this.app.set(key, value);
        }
        this.app.use(require('compression')());
        bodyParser = require('body-parser');
        this.app.use(bodyParser.urlencoded({
          extended: true
        }));
        this.app.use(bodyParser.json());
        if (this.app.get('upload directory') != null) {
          this.app.use(require('multer')({
            dest: this.app.get('upload directory')
          }));
        }
        this.app.use(require('method-override')());
        this.app.use(require('cookie-parser')(this.app.get('cookie secret')));
        this.app.use(require('cookie-session')({
          key: this.app.get('session key'),
          secret: this.app.get('session secret')
        }));
        if (this.app.get('allowed cross domains') != null) {
          this.app.use((function(_this) {
            return function(req, res, next) {
              res.header('Access-Control-Allow-Origin', _this.app.get('allowed cross domains'));
              res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
              res.header('Access-Control-Allow-Headers', 'Content-Type');
              return next();
            };
          })(this));
        }
        this.app.use(require('morgan')());
        this.app.route = (function(_this) {
          return function(source, target) {
            return _this.app.use(source, express["static"](target));
          };
        })(this);
        this.play(this.app, this.configMethods);
        this.app.use(require('errorhandler')({
          dumpExceptions: true,
          showStack: true
        }));
        this.app.server = http.createServer(this.app);
        port = this.app.get('port') || process.env.PORT || 8080;
        console.log("Express is listening on port " + port + "...");
        this.app.server.listen(port);
        return this.play(this.app, this.appMethods);
      };

      return Express;

    })(Recorder);
    return new Express();
  });

}).call(this);
