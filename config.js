// Generated by CoffeeScript 1.9.2
define(['module', 'fs', 'path', 'cson'], function(module, fs, path, CSON) {
  var configuration, copy, domainenv, domainenvblob, domainenvcontents, domainenvvar, envdomain, filecontents, filepath, globalenv, globalenvblob, globalenvcontents, globalenvvar, i, len, parse, ref, result, template;
  copy = function(source, target) {
    var key, results, value;
    results = [];
    for (key in source) {
      value = source[key];
      if (typeof value === 'object') {
        if (target[key] == null) {
          target[key] = {};
        }
        results.push(copy(value, target[key]));
      } else {
        results.push(target[key] = value);
      }
    }
    return results;
  };
  template = {
    redis: {
      'use socket': true
    },
    express: {
      'session key': true,
      'cookie secret': true,
      'session secret': true,
      'allowed cross domains': true,
      'port': true
    },
    passport: {
      twitter: {
        'consumer key': true,
        'consumer secret': true,
        host: true
      },
      facebook: {
        'app id': true,
        'app secret': true,
        host: true
      },
      google: {
        realm: true,
        host: true
      },
      metocean: {
        'client id': true,
        'client secret': true,
        host: true,
        'authorization url': true,
        'token url': true
      }
    },
    mandrill: {
      'api key': true
    },
    odo: {
      auth: {
        signout: true,
        metocean: {
          successRedirect: true,
          failureRedirect: true
        }
      }
    }
  };
  parse = function(prefix, node, result) {
    var envkey, key, value;
    if (result == null) {
      result = {};
    }
    for (key in node) {
      value = node[key];
      envkey = "" + prefix + (key.toUpperCase().replace(/[ -]/g, '_'));
      if (typeof value === 'object') {
        if (result[key] == null) {
          result[key] = {};
        }
        parse(envkey + "_", value, result[key]);
      } else if (value === true && (process.env[envkey] != null)) {
        console.log("Reading " + envkey);
        result[key] = process.env[envkey];
      }
    }
    return result;
  };
  filepath = path.join(path.dirname(module.uri), '../../config.cson');
  filecontents = fs.readFileSync(filepath, 'utf-8');
  result = CSON.parseCSONString(filecontents);
  result["package"] = JSON.parse(fs.readFileSync(path.join(path.dirname(module.uri), '../../package.json')));
  result["import"] = function(source) {
    var key, results, value;
    results = [];
    for (key in source) {
      value = source[key];
      if (typeof value === 'object') {
        if (result[key] == null) {
          result[key] = {};
        }
        results.push(copy(value, result[key]));
      } else {
        results.push(result[key] = value);
      }
    }
    return results;
  };
  envdomain = result.odo.domain.toUpperCase().replace(/[ -]/g, '_');
  globalenvvar = 'ODO_CONFIG';
  globalenvblob = {};
  if (process.env[globalenvvar] != null) {
    globalenvcontents = fs.readFileSync(process.env[globalenvvar]);
    globalenvblob = CSON.parseCSONString(globalenvcontents);
  }
  globalenv = parse('', template);
  domainenvvar = envdomain + "_ODO_CONFIG";
  domainenvblob = {};
  if (process.env[domainenvvar] != null) {
    domainenvcontents = fs.readFileSync(process.env[domainenvvar]);
    domainenvblob = CSON.parseCSONString(domainenvcontents);
  }
  domainenv = parse(envdomain + "_", template);
  ref = [globalenvblob, globalenv, domainenvblob, domainenv];
  for (i = 0, len = ref.length; i < len; i++) {
    configuration = ref[i];
    result["import"](configuration);
  }
  return result;
});
