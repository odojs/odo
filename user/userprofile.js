// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['redis', 'odo/config', 'odo/messaging/hub', 'js-md5'], function(redis, config, hub, md5) {
    var UserProfile, db;
    db = redis.createClient(config.redis.port, config.redis.host);
    return UserProfile = (function() {
      function UserProfile() {
        this.addOrRemoveValues = __bind(this.addOrRemoveValues, this);
        this.projection = __bind(this.projection, this);
      }

      UserProfile.prototype.projection = function() {
        hub.receive('userTrackingStarted', (function(_this) {
          return function(event, cb) {
            var user;
            user = {
              id: event.payload.id,
              displayName: event.payload.profile.displayName
            };
            return db.hset("" + config.odo.domain + ":users", event.payload.id, JSON.stringify(user), cb);
          };
        })(this));
        hub.receive('userHasEmailAddress', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.email = event.payload.email;
              user.emailHash = md5(event.payload.email.trim().toLowerCase());
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userHasDisplayName', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.displayName = event.payload.displayName;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userHasUsername', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              console.log("giving user a username " + event.payload.username);
              user.username = event.payload.username;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userTwitterConnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.twitter = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userTwitterDisconnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.twitter = null;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userFacebookConnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.facebook = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userFacebookDisconnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.facebook = null;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userGoogleConnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.google = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userGoogleDisconnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.google = null;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userMetOceanConnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.metocean = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userMetOceanDisconnected', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.metocean = null;
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userHasLocalSignin', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local = {
                id: event.payload.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          };
        })(this));
        hub.receive('userHasPassword', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local.profile.password = event.payload.password;
              return user;
            }, cb);
          };
        })(this));
        return hub.receive('userLocalSigninRemoved', (function(_this) {
          return function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local = null;
              return user;
            }, cb);
          };
        })(this));
      };

      UserProfile.prototype.addOrRemoveValues = function(event, callback, cb) {
        return db.hget("" + config.odo.domain + ":users", event.payload.id, (function(_this) {
          return function(err, user) {
            if (err != null) {
              cb();
              return;
            }
            user = JSON.parse(user);
            user = callback(user);
            user = JSON.stringify(user, null, 4);
            return db.hset("" + config.odo.domain + ":users", event.payload.id, user, function() {
              return cb();
            });
          };
        })(this));
      };

      UserProfile.prototype.get = function(id, callback) {
        return db.hget("" + config.odo.domain + ":users", id, (function(_this) {
          return function(err, data) {
            if (err != null) {
              callback(err);
              return;
            }
            data = JSON.parse(data);
            if (data != null) {
              callback(null, data);
              return;
            }
            return setTimeout(function() {
              return db.hget("" + config.odo.domain + ":users", id, function(err, data) {
                if (err != null) {
                  callback(err);
                  return;
                }
                data = JSON.parse(data);
                return callback(null, data);
              });
            }, 1000);
          };
        })(this));
      };

      return UserProfile;

    })();
  });

}).call(this);
