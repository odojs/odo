// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var User;
    return User = (function() {
      function User(id) {
        this.removeLocalSigninForUser = __bind(this.removeLocalSigninForUser, this);
        this.createPasswordResetToken = __bind(this.createPasswordResetToken, this);
        this.assignPasswordToUser = __bind(this.assignPasswordToUser, this);
        this.createLocalSigninForUser = __bind(this.createLocalSigninForUser, this);
        this.disconnectOAuth2FromUser = __bind(this.disconnectOAuth2FromUser, this);
        this.connectOAuth2ToUser = __bind(this.connectOAuth2ToUser, this);
        this.disconnectGoogleFromUser = __bind(this.disconnectGoogleFromUser, this);
        this.connectGoogleToUser = __bind(this.connectGoogleToUser, this);
        this.disconnectFacebookFromUser = __bind(this.disconnectFacebookFromUser, this);
        this.connectFacebookToUser = __bind(this.connectFacebookToUser, this);
        this.disconnectTwitterFromUser = __bind(this.disconnectTwitterFromUser, this);
        this.connectTwitterToUser = __bind(this.connectTwitterToUser, this);
        this.assignUsernameToUser = __bind(this.assignUsernameToUser, this);
        this.assignDisplayNameToUser = __bind(this.assignDisplayNameToUser, this);
        this.createVerifyEmailAddressToken = __bind(this.createVerifyEmailAddressToken, this);
        this.assignEmailAddressToUser = __bind(this.assignEmailAddressToUser, this);
        this.startTrackingUser = __bind(this.startTrackingUser, this);
        this.id = id;
      }

      User.prototype.startTrackingUser = function(command, callback) {
        this["new"]('userTrackingStarted', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.assignEmailAddressToUser = function(command, callback) {
        this["new"]('userHasEmailAddress', {
          id: this.id,
          email: command.email
        });
        return callback(null);
      };

      User.prototype.createVerifyEmailAddressToken = function(command, callback) {
        this["new"]('userHasVerifyEmailAddressToken', {
          id: this.id,
          email: command.email,
          token: command.token
        });
        return callback(null);
      };

      User.prototype.assignDisplayNameToUser = function(command, callback) {
        this["new"]('userHasDisplayName', {
          id: this.id,
          displayName: command.displayName
        });
        return callback(null);
      };

      User.prototype.assignUsernameToUser = function(command, callback) {
        this["new"]('userHasUsername', {
          id: this.id,
          username: command.username
        });
        return callback(null);
      };

      User.prototype.connectTwitterToUser = function(command, callback) {
        this["new"]('userTwitterConnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.disconnectTwitterFromUser = function(command, callback) {
        this["new"]('userTwitterDisconnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.connectFacebookToUser = function(command, callback) {
        this["new"]('userFacebookConnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.disconnectFacebookFromUser = function(command, callback) {
        this["new"]('userFacebookDisconnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.connectGoogleToUser = function(command, callback) {
        this["new"]('userGoogleConnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.disconnectGoogleFromUser = function(command, callback) {
        this["new"]('userGoogleDisconnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.connectOAuth2ToUser = function(command, callback) {
        this["new"]('userOAuth2Connected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.disconnectOAuth2FromUser = function(command, callback) {
        this["new"]('userOAuth2Disconnected', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.createLocalSigninForUser = function(command, callback) {
        this["new"]('userHasLocalSignin', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      User.prototype.assignPasswordToUser = function(command, callback) {
        this["new"]('userHasPassword', {
          id: this.id,
          password: command.password
        });
        return callback(null);
      };

      User.prototype.createPasswordResetToken = function(command, callback) {
        this["new"]('userHasPasswordResetToken', {
          id: this.id,
          token: command.token
        });
        return callback(null);
      };

      User.prototype.removeLocalSigninForUser = function(command, callback) {
        this["new"]('userLocalSigninRemoved', {
          id: this.id,
          profile: command.profile
        });
        return callback(null);
      };

      return User;

    })();
  });

}).call(this);
