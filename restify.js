// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['odo/config', 'odo/recorder'], function(config, Recorder) {
    var Restify;
    Restify = (function(_super) {
      __extends(Restify, _super);

      function Restify() {
        this.api = __bind(this.api, this);
        Restify.__super__.constructor.call(this, ['get', 'post', 'put', 'delete', 'use']);
      }

      Restify.prototype.api = function() {
        var port, restify, server, _ref, _ref1;
        restify = require('restify');
        server = restify.createServer();
        server.use(restify.acceptParser(server.acceptable));
        server.use(restify.authorizationParser());
        server.use(restify.dateParser());
        server.use(restify.queryParser());
        server.use(restify.jsonp());
        server.use(restify.gzipResponse());
        server.use(restify.bodyParser());
        if ((_ref = config.restify) != null ? _ref['allowed cross domains'] : void 0) {
          server.use(restify.CORS({
            origins: config.restify['allowed cross domains'].split(' ')
          }));
        }
        server.use(restify.conditionalRequest());
        this.play(server);
        port = ((_ref1 = config.restify) != null ? _ref1.port : void 0) || process.env.PORT || 8080;
        return server.listen(port, function() {
          return console.log("Restify is listening on port " + port + "...");
        });
      };

      return Restify;

    })(Recorder);
    return new Restify();
  });

}).call(this);
