// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['passport', 'passport-metocean', 'odo/config', 'odo/auth/provider'], function(passport, passportmetocean, config, ProviderAuthentication) {
    var MetOceanAuthentication;
    return MetOceanAuthentication = (function(_super) {
      __extends(MetOceanAuthentication, _super);

      function MetOceanAuthentication() {
        this.web = __bind(this.web, this);
        this.provider = 'metocean';
      }

      MetOceanAuthentication.prototype.web = function() {
        passport.use(new passportmetocean.Strategy({
          clientID: config.passport.metocean['client id'],
          clientSecret: config.passport.metocean['client secret'],
          host: "" + config.metocean.protocol + "://" + config.metocean.rootdomain,
          callbackURL: config.passport.metocean['host'] + 'odo/auth/metocean/callback',
          passReqToCallback: true
        }, (function(_this) {
          return function(req, accessToken, refreshToken, profile, done) {
            return _this.signin(req, accessToken, refreshToken, profile, done);
          };
        })(this)));
        return MetOceanAuthentication.__super__.web.call(this);
      };

      return MetOceanAuthentication;

    })(ProviderAuthentication);
  });

}).call(this);
