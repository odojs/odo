// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['passport', 'passport-metocean', 'odo/config', 'odo/messaging/hub', 'node-uuid', 'redis', 'odo/express'], function(passport, passportmetocean, config, hub, uuid, redis, express) {
    var MetOceanAuthentication, db;
    db = redis.createClient(config.redis.port, config.redis.host);
    return MetOceanAuthentication = (function() {
      function MetOceanAuthentication() {
        this.signin = __bind(this.signin, this);
        this.projection = __bind(this.projection, this);
        this.web = __bind(this.web, this);
      }

      MetOceanAuthentication.prototype.web = function() {
        passport.use(new passportmetocean.Strategy({
          clientID: config.passport.metocean['client id'],
          clientSecret: config.passport.metocean['client secret'],
          callbackURL: config.passport.metocean['host'] + 'odo/auth/metocean/callback',
          authorizationURL: config.passport.metocean['authorization url'],
          tokenURL: config.passport.metocean['token url'],
          passReqToCallback: true
        }, this.signin));
        express.get('/odo/auth/metocean', passport.authenticate('metocean'));
        return express.get('/odo/auth/metocean/callback', function(req, res, next) {
          return passport.authenticate('metocean', function(err, user, info) {
            var _ref, _ref1;
            if (err != null) {
              return next(err);
            }
            if (!user) {
              if (((_ref = config.odo.auth) != null ? (_ref1 = _ref.metocean) != null ? _ref1.failureRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.metocean.failureRedirect);
              }
              return res.redirect('/#auth/metocean/failure');
            }
            return req.logIn(user, function(err) {
              var returnTo, _ref2, _ref3, _ref4;
              if (err != null) {
                return next(err);
              }
              if (((_ref2 = req.session) != null ? _ref2.returnTo : void 0) != null) {
                returnTo = req.session.returnTo;
                delete req.session.returnTo;
                return res.redirect(returnTo);
              }
              if (((_ref3 = config.odo.auth) != null ? (_ref4 = _ref3.metocean) != null ? _ref4.successRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.metocean.successRedirect);
              }
              return res.redirect('/#auth/metocean/success');
            });
          })(req, res, next);
        });
      };

      MetOceanAuthentication.prototype.projection = function() {
        hub.receive('userMetOceanConnected', (function(_this) {
          return function(event, cb) {
            return db.hset("" + config.odo.domain + ":usermetocean", event.payload.profile.id, event.payload.id, function() {
              return cb();
            });
          };
        })(this));
        return hub.receive('userMetOceanDisconnected', (function(_this) {
          return function(event, cb) {
            return db.hdel("" + config.odo.domain + ":usermetocean", event.payload.profile.id, function() {
              return cb();
            });
          };
        })(this));
      };

      MetOceanAuthentication.prototype.signin = function(req, accessToken, refreshToken, profile, done) {
        var userid;
        userid = null;
        return this.get(profile.id, (function(_this) {
          return function(err, userid) {
            var user;
            if (err != null) {
              done(err);
              return;
            }
            if ((req.user != null) && (userid != null) && req.user.id !== userid) {
              done(null, false, {
                message: 'This MetOcean account is connected to another account'
              });
              return;
            }
            if (req.user != null) {
              console.log('user already exists, connecting MetOcean to user');
              userid = req.user.id;
              hub.send({
                command: 'connectMetOceanToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
            } else if (userid == null) {
              console.log('no user exists yet, creating a new id');
              userid = uuid.v1();
              hub.send({
                command: 'startTrackingUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
              hub.send({
                command: 'connectMetOceanToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
              hub.send({
                command: 'assignDisplayNameToUser',
                payload: {
                  id: userid,
                  displayName: profile.displayName
                }
              });
            } else {
              hub.send({
                command: 'connectMetOceanToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
            }
            user = {
              id: userid,
              profile: profile
            };
            return done(null, user);
          };
        })(this));
      };

      MetOceanAuthentication.prototype.get = function(id, callback) {
        return db.hget("" + config.odo.domain + ":usermetocean", id, (function(_this) {
          return function(err, data) {
            if (err != null) {
              callback(err);
              return;
            }
            if (data != null) {
              callback(null, data);
              return;
            }
            return db.hget("" + config.odo.domain + ":usermetocean", id, function(err, data) {
              if (err != null) {
                callback(err);
                return;
              }
              return callback(null, data);
            });
          };
        })(this));
      };

      return MetOceanAuthentication;

    })();
  });

}).call(this);
