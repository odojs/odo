// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['passport', 'passport-local', 'odo/config', 'odo/messaging/hub', 'node-uuid', 'redis', 'odo/user/userprofile', 'odo/express/app'], function(passport, passportlocal, config, hub, uuid, redis, UserProfile, app) {
    var LocalAuthentication, db;
    db = redis.createClient();
    return LocalAuthentication = (function() {
      function LocalAuthentication() {
        this.signup = __bind(this.signup, this);
        this.reset = __bind(this.reset, this);
        this.generateresettoken = __bind(this.generateresettoken, this);
        this.getresettoken = __bind(this.getresettoken, this);
        this.usernameavailability = __bind(this.usernameavailability, this);
        this.test = __bind(this.test, this);
        this.signin = __bind(this.signin, this);
        this.projection = __bind(this.projection, this);
        this.web = __bind(this.web, this);
      }

      LocalAuthentication.prototype.web = function() {
        passport.use(new passportlocal.Strategy(this.signin));
        app.post('/odo/auth/local', function(req, res, next) {
          return passport.authenticate('local', function(err, user, info) {
            var _ref, _ref1;
            if (err != null) {
              return next(err);
            }
            if (!user) {
              if (((_ref = config.odo.auth) != null ? (_ref1 = _ref.local) != null ? _ref1.failureRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.local.failureRedirect);
              }
              return res.redirect('/#auth/local/failure');
            }
            return req.logIn(user, function(err) {
              var returnTo, _ref2, _ref3, _ref4;
              if (err != null) {
                return next(err);
              }
              if (((_ref2 = req.session) != null ? _ref2.returnTo : void 0) != null) {
                returnTo = req.session.returnTo;
                delete req.session.returnTo;
                return res.redirect(returnTo);
              }
              if (((_ref3 = config.odo.auth) != null ? (_ref4 = _ref3.local) != null ? _ref4.successRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.local.successRedirect);
              }
              return res.redirect('/#auth/local/success');
            });
          })(req, res, next);
        });
        app.get('/odo/auth/local/test', this.test);
        app.get('/odo/auth/local/usernameavailability', this.usernameavailability);
        app.get('/odo/auth/local/resettoken', this.getresettoken);
        app.post('/odo/auth/local/resettoken', this.generateresettoken);
        app.post('/odo/auth/local/reset', this.reset);
        return app.post('/odo/auth/local/signup', this.signup);
      };

      LocalAuthentication.prototype.projection = function() {
        hub.receive('userHasLocalSignin', (function(_this) {
          return function(event, cb) {
            return db.hset("" + config.odo.domain + ":localusers", event.payload.profile.username, event.payload.id, function() {
              return cb();
            });
          };
        })(this));
        hub.receive('userHasUsername', (function(_this) {
          return function(event, cb) {
            return _this.get(event.payload.username, function(err, userid) {
              if (err != null) {
                console.log(err);
                cb();
                return;
              }
              if (userid == null) {
                cb();
                return;
              }
              return db.hset("" + config.odo.domain + ":localusers", event.payload.username, event.payload.id, function() {
                return cb();
              });
            });
          };
        })(this));
        hub.receive('userLocalSigninRemoved', (function(_this) {
          return function(event, cb) {
            return db.hdel("" + config.odo.domain + ":localusers", event.payload.profile.username, function() {
              return cb();
            });
          };
        })(this));
        return hub.receive('userHasPasswordResetToken', (function(_this) {
          return function(event, cb) {
            var key;
            key = "" + config.odo.domain + ":passwordresettoken:" + event.payload.token;
            console.log(key);
            return db.multi().set(key, event.payload.id).expire(key, 60 * 60 * 24).exec(function(err, replies) {
              if (err != null) {
                console.log(err);
                cb();
                return;
              }
              return cb();
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.signin = function(username, password, done) {
        var userid;
        userid = null;
        return this.get(username, (function(_this) {
          return function(err, userid) {
            if (err != null) {
              done(err);
              return;
            }
            if (userid == null) {
              done(null, false, {
                message: 'Incorrect username or password.'
              });
              return;
            }
            return new UserProfile().get(userid, function(err, user) {
              if (err != null) {
                done(err);
                return;
              }
              if (user.local.profile.password !== password) {
                done(null, false, {
                  message: 'Incorrect username or password.'
                });
                return;
              }
              return done(null, user);
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.test = function(req, res) {
        if (req.query.username == null) {
          res.send({
            isValid: false,
            message: 'Username required'
          });
          return;
        }
        if (req.query.password == null) {
          res.send({
            isValid: false,
            message: 'Password required'
          });
          return;
        }
        return this.get(req.query.username, (function(_this) {
          return function(err, userid) {
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send({
                isValid: false,
                message: 'Incorrect username or password'
              });
              return;
            }
            return new UserProfile().get(userid, function(err, user) {
              if (err != null) {
                console.log(err);
                res.send(500, 'Woops');
                return;
              }
              if (user.local.profile.password !== req.query.password) {
                res.send({
                  isValid: false,
                  message: 'Incorrect username or password'
                });
                return;
              }
              res.send({
                isValid: true,
                message: 'Correct username and password'
              });
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.usernameavailability = function(req, res) {
        if (req.query.username == null) {
          res.send({
            isAvailable: false,
            message: 'Required'
          });
          return;
        }
        return this.get(req.query.username, (function(_this) {
          return function(err, userid) {
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send({
                isAvailable: true,
                message: 'Available'
              });
              return;
            }
            res.send({
              isAvailable: false,
              message: 'Taken'
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.getresettoken = function(req, res) {
        if (req.query.token == null) {
          res.send(400, 'Token required');
          return;
        }
        return db.get("" + config.odo.domain + ":passwordresettoken:" + req.query.token, (function(_this) {
          return function(err, userid) {
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send({
                isValid: false,
                message: 'Token not valid'
              });
              return;
            }
            return new UserProfile().get(userid, function(err, user) {
              if (err != null) {
                console.log(err);
                res.send(500, 'Woops');
                return;
              }
              if (userid == null) {
                res.send({
                  isValid: false,
                  message: 'Token not valid'
                });
                return;
              }
              return res.send({
                isValid: true,
                username: user.username,
                message: 'Token valid'
              });
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.generateresettoken = function(req, res) {
        if (req.body.email == null) {
          res.send(400, 'Email address required');
          return;
        }
        return db.hget("" + config.odo.domain + ":useremail", req.body.email, (function(_this) {
          return function(err, userid) {
            var token;
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send(400, 'Incorrect email address');
              return;
            }
            token = uuid.v1();
            console.log("createPasswordResetToken " + token);
            hub.send({
              command: 'createPasswordResetToken',
              payload: {
                id: userid,
                token: uuid.v1()
              }
            });
            return res.send('Token generated');
          };
        })(this));
      };

      LocalAuthentication.prototype.reset = function(req, res) {
        var key;
        if (req.body.token == null) {
          res.send(400, 'Token required');
          return;
        }
        if (req.body.password == null) {
          res.send(400, 'Password required');
          return;
        }
        if (req.body.password.length < 8) {
          res.send(400, 'Password needs to be at least eight letters long');
          return;
        }
        key = "" + config.odo.domain + ":passwordresettoken:" + req.body.token;
        return db.get(key, (function(_this) {
          return function(err, userid) {
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send(400, 'Token not valid');
              return;
            }
            console.log('assigning a username for user');
            hub.send({
              command: 'assignPasswordToUser',
              payload: {
                id: userid,
                password: req.body.password
              }
            });
            return db.del(key, function(err, reply) {
              if (err != null) {
                console.log(err);
                res.send(500, 'Woops');
                return;
              }
              return res.send('Done');
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.signup = function(req, res) {
        var profile, userid;
        if (req.body.displayName == null) {
          res.send(400, 'Full name required');
          return;
        }
        if (req.body.username == null) {
          res.send(400, 'Username required');
          return;
        }
        if (req.body.password == null) {
          res.send(400, 'Password required');
          return;
        }
        if (req.body.password.length < 8) {
          res.send(400, 'Password needs to be at least eight letters long');
          return;
        }
        if (req.body.password !== req.body.passwordconfirm) {
          res.send(400, 'Passwords must match');
          return;
        }
        userid = null;
        profile = req.body;
        if (req.user != null) {
          console.log('user already exists, creating local signin');
          userid = req.user.id;
          profile.id = req.user.id;
        } else {
          console.log('no user exists yet, creating a new id');
          userid = uuid.v1();
          profile.id = userid;
          hub.send({
            command: 'startTrackingUser',
            payload: {
              id: userid,
              profile: profile
            }
          });
        }
        console.log('creating a local signin for user');
        hub.send({
          command: 'createLocalSigninForUser',
          payload: {
            id: userid,
            profile: profile
          }
        });
        console.log('assigning a username for user');
        hub.send({
          command: 'assignUsernameToUser',
          payload: {
            id: userid,
            username: profile.username
          }
        });
        console.log('assigning a displayName for user');
        hub.send({
          command: 'assignDisplayNameToUser',
          payload: {
            id: userid,
            displayName: profile.displayName
          }
        });
        console.log('assigning a username for user');
        hub.send({
          command: 'assignPasswordToUser',
          payload: {
            id: userid,
            password: profile.password
          }
        });
        return new UserProfile().get(userid, (function(_this) {
          return function(err, user) {
            if (err != null) {
              res.send(500, 'Couldn\'t find user');
              return;
            }
            return req.login(user, function(err) {
              if (err != null) {
                res.send(500, 'Couldn\'t login user');
                return;
              }
              return res.redirect('/');
            });
          };
        })(this));
      };

      LocalAuthentication.prototype.get = function(username, callback) {
        console.log;
        return db.hget("" + config.odo.domain + ":localusers", username, (function(_this) {
          return function(err, data) {
            if (err != null) {
              callback(err);
              return;
            }
            return callback(null, data);
          };
        })(this));
      };

      return LocalAuthentication;

    })();
  });

}).call(this);
