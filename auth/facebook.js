// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['passport', 'passport-facebook', 'odo/config', 'odo/hub', 'node-uuid', 'redis', 'odo/express'], function(passport, passportfacebook, config, hub, uuid, redis, express) {
    var FacebookAuthentication, db;
    db = redis.createClient(config.redis.port, config.redis.host);
    return FacebookAuthentication = (function() {
      function FacebookAuthentication() {
        this.signin = __bind(this.signin, this);
        this.projection = __bind(this.projection, this);
        this.web = __bind(this.web, this);
      }

      FacebookAuthentication.prototype.web = function() {
        passport.use(new passportfacebook.Strategy({
          clientID: config.passport.facebook['app id'],
          clientSecret: config.passport.facebook['app secret'],
          callbackURL: config.passport.facebook['host'] + '/odo/auth/facebook/callback',
          passReqToCallback: true
        }, this.signin));
        express.get('/odo/auth/facebook', passport.authenticate('facebook'));
        express.get('/odo/auth/facebook/callback', function(req, res, next) {
          return passport.authenticate('facebook', function(err, user, info) {
            var _ref, _ref1;
            if (err != null) {
              return next(err);
            }
            if (!user) {
              if (((_ref = config.odo.auth) != null ? (_ref1 = _ref.facebook) != null ? _ref1.failureRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.facebook.failureRedirect);
              }
              return res.redirect('/#auth/facebook/failure');
            }
            return req.logIn(user, function(err) {
              var returnTo, _ref2, _ref3, _ref4;
              if (err != null) {
                return next(err);
              }
              if (((_ref2 = req.session) != null ? _ref2.returnTo : void 0) != null) {
                returnTo = req.session.returnTo;
                delete req.session.returnTo;
                return res.redirect(returnTo);
              }
              if (((_ref3 = config.odo.auth) != null ? (_ref4 = _ref3.facebook) != null ? _ref4.successRedirect : void 0 : void 0) != null) {
                return res.redirect(config.odo.auth.facebook.successRedirect);
              }
              return res.redirect('/#auth/facebook/success');
            });
          })(req, res, next);
        });
        return express.post('/odo/auth/facebook/disconnect', (function(_this) {
          return function(req, res) {
            if (req.body.id == null) {
              res.send(400, 'Id required');
              return;
            }
            if (req.body.profile == null) {
              res.send(400, 'Profile required');
              return;
            }
            console.log("Disconnecting facebook from " + req.body.id);
            return hub.send({
              command: 'disconnectFacebookFromUser',
              payload: {
                id: req.body.id,
                profile: req.body.profile
              }
            });
          };
        })(this));
      };

      FacebookAuthentication.prototype.projection = function() {
        hub.receive('userFacebookConnected', (function(_this) {
          return function(event, cb) {
            return db.hset("" + config.odo.domain + ":userfacebook", event.payload.profile.id, event.payload.id, function() {
              return cb();
            });
          };
        })(this));
        return hub.receive('userFacebookDisconnected', (function(_this) {
          return function(event, cb) {
            return db.hdel("" + config.odo.domain + ":userfacebook", event.payload.profile.id, function() {
              return cb();
            });
          };
        })(this));
      };

      FacebookAuthentication.prototype.signin = function(req, accessToken, refreshToken, profile, done) {
        var userid;
        userid = null;
        return this.get(profile.id, (function(_this) {
          return function(err, userid) {
            var user;
            if (err != null) {
              done(err);
              return;
            }
            if ((req.user != null) && (userid != null) && req.user.id !== userid) {
              done(null, false, {
                message: 'This Facebook account is connected to another account'
              });
              return;
            }
            if (req.user != null) {
              console.log('user already exists, connecting facebook to user');
              userid = req.user.id;
              hub.send({
                command: 'connectFacebookToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
            } else if (userid == null) {
              console.log('no user exists yet, creating a new id');
              userid = uuid.v4();
              hub.send({
                command: 'startTrackingUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
              hub.send({
                command: 'connectFacebookToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
              hub.send({
                command: 'assignDisplayNameToUser',
                payload: {
                  id: userid,
                  displayName: profile.displayName
                }
              });
            } else {
              hub.send({
                command: 'connectFacebookToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
            }
            user = {
              id: userid,
              profile: profile
            };
            return done(null, user);
          };
        })(this));
      };

      FacebookAuthentication.prototype.get = function(id, callback) {
        return db.hget("" + config.odo.domain + ":userfacebook", id, (function(_this) {
          return function(err, data) {
            if (err != null) {
              callback(err);
              return;
            }
            if (data != null) {
              callback(null, data);
              return;
            }
            return db.hget("" + config.odo.domain + ":userfacebook", id, function(err, data) {
              if (err != null) {
                callback(err);
                return;
              }
              return callback(null, data);
            });
          };
        })(this));
      };

      return FacebookAuthentication;

    })();
  });

}).call(this);
