// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['passport', 'node-uuid', 'odo/redis', 'odo/config', 'odo/hub', 'odo/express'], function(passport, uuid, redis, config, hub, express) {
  var ProviderAuthentication;
  return ProviderAuthentication = (function() {
    function ProviderAuthentication() {
      this.signin = __bind(this.signin, this);
      this.projection = __bind(this.projection, this);
      this.web = __bind(this.web, this);
      this.db = __bind(this.db, this);
    }

    ProviderAuthentication.prototype.db = function() {
      if (this._db != null) {
        return this._db;
      }
      return this._db = redis();
    };

    ProviderAuthentication.prototype.web = function() {
      var settings;
      settings = config.odo.auth[this.provider];
      express.get("/odo/auth/" + this.provider, passport.authenticate(this.provider));
      express.get("/odo/auth/" + this.provider + "/callback", (function(_this) {
        return function(req, res, next) {
          return passport.authenticate(_this.provider, function(err, user, info) {
            if (err != null) {
              throw err;
            }
            if (!user) {
              if (settings.failureRedirect != null) {
                return res.redirect(settings.failureRedirect);
              }
              return res.redirect("/#auth/" + _this.provider + "/failure");
            }
            return req.logIn(user, function(err) {
              var returnTo, _ref;
              if (err != null) {
                return next(err);
              }
              if (((_ref = req.session) != null ? _ref.returnTo : void 0) != null) {
                returnTo = req.session.returnTo;
                delete req.session.returnTo;
                return res.redirect(returnTo);
              }
              if (settings.successRedirect != null) {
                return res.redirect(settings.successRedirect);
              }
              return res.redirect("/#auth/" + _this.provider + "/success");
            });
          })(req, res, next);
        };
      })(this));
      return express.post("/odo/auth/" + this.provider + "/disconnect", (function(_this) {
        return function(req, res) {
          if (req.body.id == null) {
            return res.send(400, 'Id required');
          }
          if (req.body.profile == null) {
            return res.send(400, 'Profile required');
          }
          hub.emit("disconnect " + _this.provider + " from user {id}", {
            id: req.body.id,
            profile: req.body.profile
          });
          return res.send('Done');
        };
      })(this));
    };

    ProviderAuthentication.prototype.projection = function() {
      hub.every("connect " + this.provider + " to user {id}", (function(_this) {
        return function(m, cb) {
          return _this.db().hset("" + config.odo.domain + ":user" + _this.provider, m.profile.id, m.id, function() {
            return cb();
          });
        };
      })(this));
      return hub.every("disconnect " + this.provider + " from user {id}", (function(_this) {
        return function(m, cb) {
          return _this.db().hdel("" + config.odo.domain + ":user" + _this.provider, m.profile.id, function() {
            return cb();
          });
        };
      })(this));
    };

    ProviderAuthentication.prototype.signin = function(req, accessToken, refreshToken, profile, done) {
      var userid;
      userid = null;
      return this.get(profile.id, (function(_this) {
        return function(err, userid) {
          if (err != null) {
            return done(err);
          }
          if ((req.user != null) && (userid != null) && req.user.id !== userid) {
            return done(null, false, {
              message: "This " + _this.provider + " account is connected to another account"
            });
          }
          if (req.user != null) {
            userid = req.user.id;
            hub.emit("connect " + _this.provider + " to user {id}", {
              id: userid,
              profile: profile
            });
          } else if (userid == null) {
            console.log('no user exists yet, creating a new id');
            userid = uuid.v4();
            hub.emit('start tracking user {id}', {
              id: userid,
              profile: profile
            });
            hub.emit("connect " + _this.provider + " to user {id}", {
              id: userid,
              profile: profile
            });
            hub.emit('assign displayName {displayName} to user {id}', {
              id: userid,
              displayName: profile.displayName
            });
          } else {
            hub.emit("connect " + _this.provider + " to user {id}", {
              id: userid,
              profile: profile
            });
          }
          return done(null, {
            id: userid,
            profile: profile
          });
        };
      })(this));
    };

    ProviderAuthentication.prototype.get = function(id, callback) {
      return this.db().hget("" + config.odo.domain + ":user" + this.provider, id, (function(_this) {
        return function(err, data) {
          if (err != null) {
            return callback(err);
          }
          if (data != null) {
            return callback(null, data);
          }
          return _this.db().hget("" + config.odo.domain + ":user" + _this.provider, id, function(err, data) {
            if (err != null) {
              return callback(err);
            }
            return callback(null, data);
          });
        };
      })(this));
    };

    return ProviderAuthentication;

  })();
});
