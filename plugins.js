// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var Plugins;
    return Plugins = (function() {
      function Plugins(plugins) {
        this.projection = __bind(this.projection, this);
        this.domain = __bind(this.domain, this);
        this.web = __bind(this.web, this);
        this.plugins = plugins;
        this.plugins = this.plugins.map(function(plugin) {
          if (typeof plugin === 'function') {
            return new plugin;
          }
          return plugin;
        });
      }

      Plugins.prototype.web = function() {
        var plugin, _i, _len, _ref, _results;
        _ref = this.plugins;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plugin = _ref[_i];
          if (plugin.web != null) {
            _results.push(plugin.web());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Plugins.prototype.domain = function() {
        var plugin, _i, _len, _ref, _results;
        _ref = this.plugins;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plugin = _ref[_i];
          if (plugin.domain != null) {
            _results.push(plugin.domain());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Plugins.prototype.projection = function() {
        var plugin, _i, _len, _ref, _results;
        _ref = this.plugins;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plugin = _ref[_i];
          if (plugin.projection != null) {
            _results.push(plugin.projection());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return Plugins;

    })();
  });

}).call(this);
